<?php
/**
 * File PentestController.php
 *
 * PHP Version 5.6
 *
 * @category  Controller
 * @package   Zerowing
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Controller;

use AppBundle\Utils\Pentester;
use AppBundle\Utils\Reporter;
use AppBundle\Utils\Target;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Class PentestController
 * @category  Class
 * @package   AppBundle\Controller
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 *
 * @Route("/pentest")
 */
class PentestController extends Controller
{

    /**
     * Leeroy Jenkins is the ultimate test
     * The full suite royal pentesting
     *
     * @param Request $request A common Symfony HTTP Request
     *
     * @internal          param Target\SqlTarget $target
     * @var               Pentester\SqlPentester $sqlPentester SQL pentesting service
     * @return            Response
     * @Route("")
     */
    public function leeroyJenkinsAction(Request $request)
    {

        //create a target object
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->request->all());

        $sqlPentester = $this->get('app.pentester.sql');

        //execute testAndGetReport with given $target
        $report = $sqlPentester->testAndGetReport($target);

        //return twig
        return $this->render(
            '@App/dump.html.twig', array(
            'report' => implode(' | ', $report),
            )
        );
    }

    /**
     * Pentesting SqlInjections ‘only'
     *
     * @param Request $request A common Symfony HTTP Request
     *
     * @return                Response
     * @internal              param Pentester\SqlPentester $sqlPentester
     *                          Pentesting service
     * @Route("/sql")
     */
    public function sqlAction(Request $request)
    {

        //create a target object
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->request->all());

        $sqlPentester = $this->get('app.pentester.sql');
        //        $this->_log[] = $sqlPentester->testAndGetReport();

        //        dump($qs);

        //execute testAndGetReport with given $target
        $report = $sqlPentester->testAndGetReport($target);

        //return twig
        return $this->render(
            '@App/dump.html.twig', array(
                'report' => implode(' | ', $report),
            )
        );
    }

    /**
     * Pentesting URL Fuzzer ‘only'
     *
     * @param Request $request A common Symfony HTTP Request
     *
     * @return                Response
     * @internal              param Pentester\FuzzPentester $fuzzPentester
     *                          Url fuzzing service
     * @Route("/fuzz")
     */
    public function fuzzAction(Request $request)
    {

        //create a target object
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->request->all());

        $fuzzPentester = $this->get('app.pentester.fuzz');

        //execute testAndGetReport with given $target
        $report = $fuzzPentester->testAndGetReport($target);

        //return twig
        return $this->render(
            '@App/dump.html.twig', array(
                'report' => implode(' | ', $report),
            )
        );

    }

}
