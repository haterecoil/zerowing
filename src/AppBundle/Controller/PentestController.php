<?php
/**
 * File PentestController.php
 *
 * PHP Version 5.6
 *
 * @category  Controller
 * @package   Zerowing
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Controller;

use AppBundle\Utils\Pentester;
use AppBundle\Utils\Reporter;
use AppBundle\Utils\Target;
use AppBundle\Utils\Bruteforcer\EasyPasswords;
use FOS\RestBundle\View\View;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpKernel\Config\FileLocator;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

use Symfony\Component\HttpKernel\KernelInterface;

/**
 * Class PentestController
 * @category  Class
 * @package   AppBundle\Controller
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 *
 * @Route("/pentest")
 */
class PentestController extends Controller
{

    /**
     * Stores all reports made by Pentesters
     * @var  Reporter\Report[]
     */
    private $_log;

    /**
     * Leeroy Jenkins is the ultimate test
     * The full suite royal pentesting
     *
     * @param Request $request A common Symfony HTTP Request
     *
     * @internal          param Target\SqlTarget $target
     * @var               Pentester\SqlPentester $sqlPentester SQL pentesting service
     * @return            Response
     * @Route("/leeroy")
     */
    public function getLeeroyjenkinsAction(Request $request)
    {

        //create a target object
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->request->all());

        //execute testAndGetReport with given $target
        $sqlPentester = $this->get('app.pentester.sql');
        $sqlReport = $sqlPentester->testAndGetReport($target);

        //execute testAndGetReport with given $target
        $fuzzPentester = $this->get('app.pentester.fuzz');
        $fuzz_report = $fuzzPentester->testAndGetReport($target);

        //execute testAndGetReport with given $target
        $xssPentester = $this->get('app.pentester.fuzz');
        $xss_report = $xssPentester->testAndGetReport($target);

        //return twig
        return new View(array(
            "sql_report" => $sqlReport,
            "fuzz_report" => $fuzz_report,
            "xss_report" => $xss_report
        ), Response::HTTP_OK);
    }

    /**
     * Pentesting URL Fuzzer ‘only'
     *
     * @param Request $request A common Symfony HTTP Request
     *
     * @return                Response
     * @internal              param Pentester\FuzzPentester $fuzzPentester
     *                          Url fuzzing service
     * @Route("/fuzz")
     */
    public function getFuzzAction(Request $request)
    {

        //create a target object
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->request->all());

        $fuzzPentester = $this->get('app.pentester.fuzz');

        //execute testAndGetReport with given $target
        $report = $fuzzPentester->testAndGetReport($target);

        //return twig
        return new View($report, Response::HTTP_OK);

    }

    /**
     * Receive a request OK
     * Creates a Target OK
     * Calls Ryan Gosling with Target OK
     * Sends a Response OK
     *
     * @Route("/sqli")
     */
    public function getSqlError(Request $request)
    {
        //création de la target
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->query->all());

        /**
         * SQL pentesting service
         * @var $sqlPentester Pentester\SqlPentester
         */
        //création du goslinger
        $goslingPentester = $this->get('app.pentester.sql');

        //appel du goslinger et sauvegarde des logs
        $report = $goslingPentester->testAndGetReport($target);

        //renvoyer une réponse
        return new View($report, Response::HTTP_OK);
    }

    /**
     * Receive a request OK
     * Creates a Target OK
     * Calls Ryan Gosling with Target OK
     * Sends a Response OK
     *
     * @Route("/xss")
     */
    public function getXssError(Request $request)
    {
        //création de la target
        $target = new Target\SqlTarget();
        $target->setUrl($request->get('url'));
        $target->setParameters($request->query->all());

        /**
         * SQL pentesting service
         * @var $sqlPentester Pentester\SqlPentester
         */
        //création du goslinger
        $goslingPentester = $this->get('app.pentester.sql');

        //appel du goslinger et sauvegarde des logs
        $report = $goslingPentester->testAndGetReport($target);

        //renvoyer une réponse
        return new View($report, Response::HTTP_OK);
    }

}
