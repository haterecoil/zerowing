<?php
/**
 * File SqlPentester.php
 *
 * PHP Version 5.6
 *
 * @category  Class
 * @package   Zerowing
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Utils\Pentester;

use AppBundle\Utils\Reporter\Reporter;
use AppBundle\Utils\Target\SqlTarget;
use AppBundle\Utils\Target\TargetInterface;
use Misd\GuzzleBundle\MisdGuzzleBundle;

/**
 * Class SqlPentester
 * @category  Class
 * @package AppBundle\Utils\Pentester
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */
class SqlPentester implements PentesterInterface
{
    /**
     * Create and store reports of actions
     * @var  Reporter
     */
    private $_reporter;

    /**
     * A Guzzle client to do HTTP Requests
     * @var $_guzzle \Guzzle\Service\Client
     */
    private $_guzzle;

    /**
     * Automatically setting up a Reporter
     * SqlPentester constructor.
     *
     * @param MisdGuzzleBundle $guzzle A guzzle client
     */
    public function __construct($guzzle)
    {
        $this->_guzzle = $guzzle;
        $this->_reporter = new Reporter("sqli");
    }

    /**
     * Launches the full pentest process
     * @param TargetInterface $target
     * @return string the report
     */
    public function testAndGetReport(TargetInterface $target)
    {
        $this->test($target);
        return $this->getReport();
    }

    public function test(TargetInterface $target)
    {
        $this->sqlErrorInjection();
        //if target = POST
        // do postGosling
        // else
        // do getGosling
        $this->getGosling($target);
    }

    /**
     * Logs an action of the Pentester
     * @param string $msg This is the message to you hou hou
     * @return void
     */
    public function report($msg)
    {
        $this->_reporter->report($msg);
    }

    /**
     * Return the full report
     * @return \AppBundle\Utils\Reporter\Report[]
     */
    public function getReport()
    {
        // TODO: Implement getReport() method.
        return $this->_reporter->getReports();
    }

    /**
     * Tries to create an error through a route.
     * @return void
     */
    private function sqlErrorInjection()
    {

        $url = 'http://vulnerable.lorem.ovh/login.php';
        $post_data = array(
            "username" => "admin",
            "password" => "password",
            "Login" => "Login"
        );

        $login_req = $this->_guzzle->createRequest('POST', $url, ['form_params' => $post_data]);
        $login_res = $login_req->send();

        dump("got for login: " . $login_res->getStatusCode());

//        $sqli_req = $this->_guzzle->createRequest('GET', 'http://vulnerable.lorem.ovh/vulnerabilities/sqli/?id=a&Submit=Submit');
        $sqli_req = $this->_guzzle->createRequest('GET', 'http://localhost/kirby/');
        $sqli_res = $sqli_req->send();

        dump("got for sqli: " . $sqli_res->getSetCookie());

        dump($sqli_res->getBody());


        if (1) {
            $this->report("we did it ");
        } else {
            $this->report("nope sorry");
        }
    }

    /**
     * @param SqlTarget $target
     */

    public function getGosling(SqlTarget $target)
    {

        $url   = $target->getUrl();
        $params= $target->getParameters();
        $success = false;

        $req = $this->_guzzle->createRequest('GET', $url, $params);
        $res = $req->send();

        echo $res->getStatusCode();
        $status_code = $res->getStatusCode();

        if ( $status_code == 200 ) {
            //do this
            //
        } else {
            // do that
            $success = true;
        }

        $this->report("sql error status : "  . $success . "for url ". $url. "and params ". $params);

        // echo $res->getBody();
        // {"type":"User"...'


    }

    public function postGosling($target)
    {

        $url=$target->setUrl($request->get('url'));
        $params=$target->setParameters($request->query->all());

        $req = $this->_guzzle->createRequest('POST', $url, ['form_params' => $params]);
        $res = $req->send();

        echo $res->getStatusCode();
        // "200"
        echo $res->getHeader('content-type');
        // 'application/json; charset=utf8'
        echo $res->getBody();
        // {"type":"User"...'

    }

}


/*// Send an asynchronous request.
        $request = new \Guzzle\Http\Message\Request('GET', $url, [
            'query' => $params
        ]);
        // Send an asynchronous request.
        $request = new \Guzzfle\Http\Message\Request('POST', $url, [
            'form_params' => $params
        ]);
        $promise = $this->_guzzle->sendAsync($request)->then(function ($response) {
            echo 'I completed! ' . $response->getBody();
        });
        $promise->wait();*/