<?php
/**
 * File XssPentester.php
 *
 * PHP Version 5.6
 *
 * @category  Class
 * @package   Zerowing
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Utils\Pentester;

use AppBundle\Utils\Reporter\Reporter;
use AppBundle\Utils\Target\TargetInterface;
use Doctrine\ORM\EntityManager;
use Misd\GuzzleBundle\MisdGuzzleBundle;

/**
 * Class XssPentester
 * @category  Class
 * @package AppBundle\Utils\Pentester
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */
class XssPentester implements PentesterInterface
{
    /**
     * Create and store reports of actions
     * @var  Reporter
     */
    private $_reporter;

    /**
     * A Guzzle client to do HTTP Requests
     * @var $_guzzle \Guzzle\Service\Client
     */
    private $_guzzle;

    /**
     * @var EntityManager
     */
    private $_em;

    /**
     * Automatically setting up a Reporter
     * XssPentester constructor.
     *
     * @param MisdGuzzleBundle $guzzle A guzzle client
     * @param EntityManager $em
     */
    public function __construct($guzzle,EntityManager $em)
    {
        $this->_guzzle = $guzzle;
        $this->_em = $em;
        $this->_reporter = new Reporter("xss");
    }

    /**
     * Launches the full pentest process
     * @param TargetInterface $target
     * @return string the report
     */
    public function testAndGetReport(TargetInterface $target)
    {
        $this->test($target);
       // $this->_em->getRepository('AppBundle')

        return $this->getReport();
    }

    public function test(TargetInterface $target)
    {
        
        // $this->sqlErrorInjection();
    }

    /**
     * Logs an action of the Pentester
     * @param string $msg This is the message to you hou hou
     * @return void
     */
    public function report($msg)
    {
        $this->_reporter->report($msg);
    }

    /**
     * Return the full report
     * @return \AppBundle\Utils\Reporter\Report[]
     */
    public function getReport()
    {
        // TODO: Implement getReport() method.
        return $this->_reporter->getReports();
    }

    /**
     * Tries to create an error through a route.
     * @return void
     */
    public function sqlErrorInjection()
    {

        $url = 'http://vulnerable.lorem.ovh/login.php';
        $post_data = array(
            "username" => "admin",
            "password" => "password",
            "Login" => "Login"
        );

        $login_req = $this->_guzzle->createRequest('POST', $url, null, $post_data);
        $login_res = $login_req->send();

        dump("got for login: " . $login_res->getStatusCode());

//        $sqli_req = $this->_guzzle->createRequest('GET', 'http://vulnerable.lorem.ovh/vulnerabilities/sqli/?id=a&Submit=Submit');
        $sqli_req = $this->_guzzle->createRequest('GET', 'http://localhost/kirby/');
        $sqli_res = $sqli_req->send();

        dump("got for sqli: " . $sqli_res->getSetCookie());

        dump($sqli_res->getBody());


        if (1) {
            $this->report("we did it ");
        } else {
            $this->report("nope sorry");
        }
    }
}