<?php
/**
 * File XssPentester.php
 *
 * PHP Version 5.6
 *
 * @category  Class
 * @package   Zerowing
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Utils\Pentester;

use AppBundle\Entity\XSSAttack;
use AppBundle\Utils\Reporter\Reporter;
use AppBundle\Utils\Target\TargetInterface;
use Doctrine\ORM\EntityManager;
use Misd\GuzzleBundle\MisdGuzzleBundle;

/**
 * Class XssPentester
 * @category  Class
 * @package AppBundle\Utils\Pentester
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */
class XssPentester implements PentesterInterface
{
    /**
     * Create and store reports of actions
     * @var  Reporter
     */
    private $_reporter;

    /**
     * A Guzzle client to do HTTP Requests
     * @var $_guzzle \Guzzle\Service\Client
     */
    private $_guzzle;

    /**
     * @var EntityManager
     */
    private $_em;

    /**
     * @return \Guzzle\Service\Client
     */
    public function getGuzzle()
    {
        return $this->_guzzle;
    }

    /**
     * Automatically setting up a Reporter
     * XssPentester constructor.
     *
     * @param MisdGuzzleBundle $guzzle A guzzle client
     * @param EntityManager $em
     */
    public function __construct($guzzle,EntityManager $em)
    {
        $this->_guzzle = $guzzle;
        $this->_em = $em;
        $this->_reporter = new Reporter("xss");
    }

    /**
     * Launches the full pentest process
     * @param TargetInterface $target
     * @return string the report
     */
    public function testAndGetReport(TargetInterface $target)
    {
        $this->test($target);
        return $this->getReport();
    }

    public function test(TargetInterface $target)
    {
        $results = $this->_em->getRepository('AppBundle:XSSAttack')->findAll();

        //put url with http form
        //$target->setUrl($this->addHttpString($target->getUrl()));
        $target->setUrl(self::addHttpString($target->getUrl()));

        foreach($results as $result){
           $response = $this->sendAttack($target, $result);
           //Check if still on page 200
           if (self::checkStatusCodeWorks($response->getStatusCode())){
               dump($result);
               dump($response);
               echo "XSS FAIL!";
               die();
           }
       }

    }

    /**
     * Logs an action of the Pentester
     * @param string $msg This is the message to you hou hou
     * @return void
     */
    public function report($msg)
    {
        $this->_reporter->report($msg);
    }

    /**
     * Return the full report
     * @return \AppBundle\Utils\Reporter\Report[]
     */
    public function getReport()
    {
        // TODO: Implement getReport() method.
        return $this->_reporter->getReports();
    }

    /*
     * Send XSS Attack to a form
     * @param object $target infomation about the request
     * @param array $result the script for the attack
     */
    private function sendAttack(TargetInterface $target, XSSAttack $result)
    {

        $client = $this->getGuzzle();
         $req = $client->createRequest(
             $target->getMethod(),
             $target->getUrl(),
         null,null,
             ["query" =>
             [
                 $target->getParameters()['key'] => $result->getMessage()
             ]]
         );
         $response = $req->send();
        return $response;

    }

    /*
     * Check if status code of the page is 200
     * @param object $response infomation about the the answers of a request
     * @return boolean
     */

    static function checkStatusCodeWorks($urlStatus){
        if ($urlStatus == 200)
            return true;
        else
            return false;
    }

    /*
     * Add http://www. in the url if not
     * @param object $target contain the url
     */
    static function addHttpString($url){

       if (!(substr( $url, 0, 7 ) === "http://")){
           if(!(substr( $url, 0, 4 ) === "www.")){
               $url = "http://www.".$url;
           }
           else{
               $url = "http://".$url;
           }
       }
        return $url;
    }

   /* static function findAttackInHtml($html, $attack){

    }*/

}