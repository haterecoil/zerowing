<?php
/**
 * File FuzzPentester.php
 *
 * PHP Version 5.6
 *
 * @category  Class
 * @package   Zerowing
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Utils\Pentester;

use AppBundle\Entity\FuzzingUri;
use AppBundle\Utils\Reporter\Reporter;
use AppBundle\Utils\Target\TargetInterface;
use Doctrine\ORM\EntityManager;
use Misd\GuzzleBundle\MisdGuzzleBundle;
use Goutte\Client;

/**
 * Class FuzzPentester
 * @category  Class
 * @package AppBundle\Utils\Pentester
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */
class FuzzPentester extends AbstractPentester
{

    /**
     * @var EntityManager
     */
    protected $_em;

    /*protected $_common_usernames = array(
        'user',
        'admin',
        'root',
        'guest'
    );

    protected $_common_passwords = array(
        'user',
        'root',
        'toor',
        'admin',
        'guest',
        'password'
    );  */

    protected $_common_usernames = array(
        'root'
    );

    protected $_common_passwords = array(
        'root'
    );

    /**
     * Automatically setting up a Reporter
     * FuzzPentester constructor.
     *
     * @param MisdGuzzleBundle $guzzle A guzzle client
     * @param EntityManager $em
     */
    public function __construct($guzzle, EntityManager $em)
    {
        parent::__construct($guzzle);
        $this->_em = $em;
        $this->_reporter = new Reporter("fuzz");
    }

    /**
     * @inheritdoc
     */
    public function test(TargetInterface $target)
    {
        $this->_guzzle->setBaseUrl($target->getUrl());
        $this->fuzzCommonUrls($target);
    }

    /**
     * Fuzzing URLs helps us finding system weaknesses
     * @param TargetInterface $target
     */
    public function fuzzCommonUrls(TargetInterface $target)
    {
        $uris = $this->_em->getRepository('AppBundle:FuzzingUri')->findAll();

        foreach ($uris as $one_uri) {
            $one_uri_string = $one_uri->getUri();
            $req = $this->_guzzle->get($one_uri_string);
            $res = $req->send();
            //todo verify 404 in text
            if (200 == $res->getStatusCode()) {
                $this->_reporter->report("Spotted ".$req->getUrl());
                $this->attackFuzzedWithCsrf($one_uri);
            }
        }
    }

    /**
     * @param FuzzingUri $uri_target
     */
    public function attackFuzzedWithCsrf(FuzzingUri $uri_target)
    {

        dump($uri_target);
        $fuzz_target = $uri_target->getFuzzTarget();
        $url = $this->_guzzle->getBaseUrl().$uri_target->getUri();

        $http_params = $fuzz_target->getParameters();
        $userAndPassRefs = $this->getUserAndPassRefs($http_params);

        foreach ( $this->_common_usernames as $username )
        {
            $userAndPassRefs['username'] = $username;

            foreach ( $this->_common_passwords as $password )
            {
                /**
                 * todo create %PASS% and %USER% in params value to iterate and bruteforce
                 * todo add bruteforce rockyou txt file
                 * todo add to DB with array of values and entity->persist() ?
                 * todo verifier connexion + verification fichier
                 * todo guzzle && goutte == wtf ?
                 */

                $userAndPassRefs['password'] = $password;

                //create a client
                $client = new Client();
                //set options
                $client->setHeader('User-Agent', "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36");
                $client->setHeader('HTTP_USER_AGENT', "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36");
                $client->followRedirects(true);

                //request csrf
                $crawler_csrf = $client->request('get',$url);

                $csrf_token = $crawler_csrf->filter('input[name="token"]')->first()->extract('value')[0];
                $http_params = array_merge($http_params, array($uri_target->getCsrf() => $csrf_token));

                dump($http_params);

                $client->followRedirects(true);
                dump($client->request(
                    $uri_target->getHttpMethod(),
                    $url,
                    $http_params
                ));


                $res = $client->getInternalResponse();
                dump($res);

            }
        }
        //create get or post request
        //get params for non-null parameters
        //step 1 = get csrf;
        //step 2 = request
        //if (step2 == ok page)
        //  report vulnerability
        //elseif (step2 == not ok page)
        //  nextValue();
    }

    /**
     * @param array $http_params
     * @param string $username
     * @param string $password
     * @return array
     */
    private function getUserAndPassRefs(array &$http_params = array())
    {
        $refs = array();
        $refs['username'] = null;
        $refs['password'] = null;

        dump($http_params);

        foreach( $http_params as &$param_value )
        {
            if ( !isset($param_value) || empty($param_value)){
                continue;
            } elseif ( $param_value == "%PASSWORD%" ) {
                $refs['password'] =& $param_value;
                dump('found pass');
                $refs['password'] = "yolol";
            } elseif ( $param_value == "%USER%" ) {
                $refs['username'] =& $param_value;
                dump('found user');
            }
        }

        return $refs;
    }

}