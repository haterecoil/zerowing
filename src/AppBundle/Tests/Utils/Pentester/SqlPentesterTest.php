<?php
/**
 * File PentestController.php
 *
 * PHP Version 5.6
 *
 * @category  Class
 * @package   AppBundle\Tests\Controller
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */

namespace AppBundle\Tests\Controller;

use AppBundle\Utils\Target\SqlTarget;
use Doctrine\Common\Annotations\Annotation\Target;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * Class SqlPentesterTest
 * @category  Class
 * @package AppBundle\Tests\Controller
 * @author    mrgn <xyz@example.com>
 * @copyright 2016 mrgn
 * @license   MIT http://choosealicense.com/licenses/mit/
 * @link      http://lorem.ovh
 */
class SqlPentesterTest extends WebTestCase
{
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $em;

    /**
     * {@inheritDoc}
     */
    protected function setUp()
    {
        self::bootKernel();

        $this->em = static::$kernel->getContainer()
            ->get('doctrine')
            ->getManager();
    }

    public function testGetGosling()
    {
        // remplir SqlTarget params ds un array genre user=> admin password=> 123random

        //remplir SqlTarget avec des faux paramètres
        $target = new SqlTarget();
        $target->setParameters(array(
            "user" => "admin",
            "password" => "123"
        ));
        $target->setUrl("www.evanpeuvergne.com/phpmyadmin");

        $repo = $this->em->getRepository('AppBundle:SqlError');;
        $sql_error = $repo->getSqlError();

        $this->assertNotNull($sql_error, "ça ofncitponne pas");
        $this->assertNotNull($sql_error->getValue(), "ça fonctionne pas");


        $used_sql_error = $sql_error->getValue();
        $url = $target->getUrl();

        $this->assertNotNull($used_sql_error, "ca marche pas");
        $this->assertNotNull($url, "ca marche pas");

        // tester si report a bien les trois variables $success, $url and $used_sql_error
    }
}
